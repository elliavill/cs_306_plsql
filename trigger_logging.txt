create or replace TRIGGER TRIGGER_GRADE_TYPE
BEFORE INSERT OR UPDATE OR DELETE ON GRADE_TYPE
FOR EACH ROW
BEGIN
   IF INSERTING THEN
      :NEW.CREATED_BY := USER;
      :NEW.CREATED_DATE := SYSDATE;
      :NEW.MODIFIED_BY := USER;
      :NEW.MODIFIED_DATE := SYSDATE;
   ELSIF UPDATING THEN 
        :NEW.MODIFIED_BY := USER; 
        :NEW.MODIFIED_DATE := SYSDATE; 
        IF :OLD.GRADE_TYPE_CODE != :NEW.GRADE_TYPE_CODE THEN 
            INSERT INTO GRADETYPE_LOGGING (GRADE_TYPE_CODE, DESCRIPTION, CHANGED_BY_USER, ACTION_TYPE, ACTION_TIME, COLUMN_CHANGED, OLD_VALUE, NEW_VALUE) 
            VALUES (:NEW.GRADE_TYPE_CODE, :NEW.DESCRIPTION, USER, 'UPADTE GRADE_TYPE_CODE', SYSDATE, 'GRADE_TYPE_CODE', :OLD.GRADE_TYPE_CODE, :NEW.GRADE_TYPE_CODE); 
        END IF; 
        IF :OLD.DESCRIPTION != :NEW.DESCRIPTION THEN 
            INSERT INTO GRADETYPE_LOGGING (GRADE_TYPE_CODE, DESCRIPTION, CHANGED_BY_USER, ACTION_TYPE, ACTION_TIME, COLUMN_CHANGED, OLD_VALUE, NEW_VALUE) 
            VALUES (:NEW.GRADE_TYPE_CODE, :NEW.DESCRIPTION, USER, 'UPADTE DESCRIPTION', SYSDATE, 'DESCRIPTION', :OLD.DESCRIPTION, :NEW.DESCRIPTION); 
        END IF;
    ELSIF DELETING THEN 
        INSERT INTO GRADETYPE_LOGGING (GRADE_TYPE_CODE, DESCRIPTION, CHANGED_BY_USER, ACTION_TYPE, ACTION_TIME, COLUMN_CHANGED, OLD_VALUE, NEW_VALUE) 
        VALUES (:OLD.GRADE_TYPE_CODE, :OLD.DESCRIPTION, USER, 'DELETE', SYSDATE, 'ALL', :OLD.GRADE_TYPE_CODE || ', ' || :OLD.DESCRIPTION, NULL); 
    END IF; 
END; 